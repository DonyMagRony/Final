version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:9092 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-food_delivery_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init:/docker-entrypoint-initdb.d
    healthcheck:
       test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
       interval: 10s
       timeout: 5s
       retries: 5

  inventory_service:
    build:
      context: .
      dockerfile: inventory_service/Dockerfile
    container_name: inventory_service
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-food_delivery_db}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      APP_PORT: 8001
      PYTHONUNBUFFERED: 1
    volumes:
      - ./inventory_service:/app/inventory_service


  pricing_service:
    build:
      context: .
      dockerfile: pricing_service/Dockerfile
    container_name: pricing_service
    ports:
      - "8002:8002"
    environment:
      APP_PORT: 8002
      PYTHONUNBUFFERED: 1
    volumes:
      - ./pricing_service:/app/pricing_service

  order_manager:
    build:
      context: .
      dockerfile: order_manager/Dockerfile
    container_name: order_manager
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      inventory_service:
        condition: service_started
      pricing_service:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      REDIS_HOST: "redis"
      INVENTORY_SERVICE_URL: "http://inventory_service:8001"
      PRICING_SERVICE_URL: "http://pricing_service:8002"
      PYTHONUNBUFFERED: 1
    volumes:
      - ./order_manager:/app/order_manager

volumes:
  redis_data:
  postgres_data: